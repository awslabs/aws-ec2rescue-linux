# Copyright 2016-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"). You
# may not use this file except in compliance with the License. A copy of
# the License is located at
#
#     http://aws.amazon.com/apache2.0/
#
#
# or in the "license" file accompanying this file. This file is
# distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
# ANY KIND, either express or implied. See the License for the specific
# language governing permissions and limitations under the License.

--- !ec2rlcore.module.Module
# Module document. Translates directly into an almost-complete Module object
name: !!str fstabfailures
path: !!str
version: !!str 1.0
title: !!str Disables fsck and sets nofail in /etc/fstab for all volumes
helptext: !!str |
  Disables fsck and sets nofail in /etc/fstab for all volumes
  Requires --fstabfailures and --remediate
placement: !!str run
package:
  - !!str
language: !!str python
remediation: !!str True
content: !!str |
  """
  Disables fsck and sets nofail in /etc/fstab for all volumes.

  Functions:
      write_default_fstab: Create a default fstab and return the list of dictionary values from the new fstab.
      parse_fstab: Parse fstab into a list of dictionary values.
      check_fsck: Check if fsck is enabled in any fstab entry.
      check_nofail: Check if nofail is enabled in any fstab entry.
      fix: Disable fsck, enable nofail, and write values to /etc/fstab.
      run: Check for the presence of fsck and nofail and remediate any discovered problems.
  """
  from __future__ import print_function
  import os
  import re
  import sys

  # Add the root program directory to sys.path so libraried functions can be imported
  # when this module is directly invoked with the interpreter.
  if __name__ == "__main__":  # pragma: no coverage
      sys.path.insert(0, os.environ["EC2RL_CALLPATH"])

  from ec2rlcore.prediag import backup
  from ec2rlcore.prediag import get_config_dict
  from ec2rlcore.prediag import restore


  def write_default_fstab(config_file_path, distro):
      """
      Create a sane default fstab.

      Parameters:
          config_file_path (str): path to the configuration file to be edited.
          distro (str): the detected distribution of Linux running on the system.

      Returns:
          True (bool): if the creation of the default fstab file was successful.
      """
      try:
          with open(config_file_path, "w") as fstab_file:
              if distro == "alami":
                  fstab_file.write("LABEL=/     /           ext4    defaults,noatime,nofail  0   0\n")
                  fstab_file.write("tmpfs       /dev/shm    tmpfs   defaults,nofail        0   0\n")
                  fstab_file.write("devpts      /dev/pts    devpts  gid=5,mode=620,nofail  0   0\n")
                  fstab_file.write("sysfs       /sys        sysfs   defaults,nofail        0   0\n")
                  fstab_file.write("proc        /proc       proc    defaults,nofail        0   0\n")
              elif distro == "alami2":
                  fstab_file.write("LABEL=/     /           xfs    defaults,noatime,nofail  0   0\n")
                  fstab_file.write("tmpfs       /dev/shm    tmpfs   defaults,nofail        0   0\n")
                  fstab_file.write("devpts      /dev/pts    devpts  gid=5,mode=620,nofail  0   0\n")
                  fstab_file.write("sysfs       /sys        sysfs   defaults,nofail        0   0\n")
                  fstab_file.write("proc        /proc       proc    defaults,nofail        0   0\n")
              elif distro == "suse":
                  fstab_file.write("/dev/disk/by-label/ROOT     /    ext4 defaults,nofail 0 0\n")
              elif distro == "rhel":
                  fstab_file.write("/dev/xvda2     /     xfs     defaults,nofail     0 0\n")
              elif distro == "ubuntu":
                  fstab_file.write("LABEL=cloudimg-rootfs    /    ext4    defaults,discard,nofail   	0 0\n")
              else:
                  raise ValueError("Invalid distribution. Unable to continue.")
          return True
      except (OSError, IOError):
          print("[WARN] Unable to write default {}, aborting.".format(config_file_path))
          raise


  def parse_fstab(config_file_path):
      """
      Parse config_file_path into a list of dictionaries.

      Parameters:
          config_file_path (str): path to the configuration file to be edited.

      Returns:
          fstab (list): list of dicts representing the options an fstab entry.
      """
      fstab = []
      fstabkeyname = ["Filesystem", "Mountpoint", "FSType", "Options", "Dump", "fsck"]
      try:
          with open(config_file_path, "r") as f:
              for line in f:
                  line = line.strip()
                  # Skip both empty lines and comment lines
                  if not line or line.startswith("#"):
                      continue
                  print("Parsing line: '{}'".format(line))
                  entry = {}
                  for value, key in zip(line.split(), fstabkeyname):
                      entry[key] = value
                  if len(entry.keys()) == 4:
                      entry[fstabkeyname[4]] = "0"
                      entry[fstabkeyname[5]] = "0"
                  elif len(entry.keys()) == 5:
                      entry[fstabkeyname[5]] = "0"
                  fstab.append(entry)
          return fstab
      except (OSError, IOError):
          print("Unable to open and parse {}. Invalid fstab?".format(config_file_path))
          raise


  def check_fsck(fstab_list):
      """
      Check if fsck is enabled in an entry.

      Parameters:
          fstab_list (list): dict-represented lines of the fstab file.

      Returns:
          (bool): True if fsck is enabled in any fstab entry.
      """
      problem_found = False
      print("Checking for volumes with fsck enabled")
      for line_args in fstab_list:
          if line_args["fsck"] == "1":
              problem_found = True
              print("\tfsck enabled: '{}'".format(line_args["Filesystem"]))
              line_args["fsck"] = "0"
      return problem_found


  def check_nofail(fstab_list):
      """
      Check if nofail is enabled in an entry.

      Parameters:
          fstab_list (list): dict-represented lines of the fstab file

      Returns:
          (bool): True if nofail is missing from any fstab entry.
      """
      problem_found = False
      print("Checking for volumes without nofail")
      for line_args in fstab_list:
          if not re.search("nofail", line_args["Options"]):
              problem_found = True
              print("\tMissing nofail: '{}'".format(line_args["Filesystem"]))
              line_args["Options"] += ",nofail"
      return problem_found


  def fix(fstab_list, config_file_path):
      """
      Rewrites /etc/fstab with new fixed values

      Parameters:
          fstab_list (list): dict-represented lines of the fstab file.
          config_file_path (str): path to the configuration file to be edited.

      Returns:
          True (bool): True if the rewrite was successful.
      """
      try:
          with open(config_file_path, "w") as fstab_file:
              for line_args in fstab_list:
                  line = "{}\n".format("\t".join((line_args["Filesystem"],
                                                  line_args["Mountpoint"],
                                                  line_args["FSType"],
                                                  line_args["Options"],
                                                  line_args["Dump"],
                                                  line_args["fsck"])))
                  print("Writing line '{}'".format(line.strip()))
                  fstab_file.write(line)
          print("[SUCCESS] {} rewritten".format(config_file_path))
          print("Please see https://github.com/awslabs/aws-ec2rescue-linux/blob/master/docs/modules/fstabfailures.md "
                "for further details")
          return True
      except Exception:
          print("[WARN] Unable to write new {}. "
                "Please review logs to determine the cause of the issue.".format(config_file_path))
          raise


  def run():
      """
      Check for the presence of fsck and no fail and remediate any discovered problems.

      Returns:
          (bool): True if no problem was found or if all discovered problems were remediated.
      """
      config_file_path = "/etc/fstab"
      sys_config_dict = dict()
      try:
          sys_config_dict = get_config_dict("fstabfailures")
          if not os.path.isfile(config_file_path):
              print("Missing {}, creating one with sane defaults".format(config_file_path))
              write_default_fstab(config_file_path, sys_config_dict["DISTRO"])
          else:
              print("{} found, continuing.".format(config_file_path))
          backup(config_file_path, sys_config_dict["BACKED_FILES"], sys_config_dict["BACKUP_DIR"])
          try:
              fstab = parse_fstab(config_file_path)
          except Exception:
              print("Unable to parse {}. Invalid fstab? Writing one with sane defaults.".format(config_file_path))
              write_default_fstab(config_file_path, sys_config_dict["DISTRO"])
              fstab = parse_fstab(config_file_path)

          # Equivalent of detect()
          if any([check_nofail(fstab), check_fsck(fstab)]):
              fix(fstab, config_file_path)
          else:
              print("[SUCCESS] {} has nofail set and is not set to fsck.".format(config_file_path))
          return True
      except Exception as ex:
          print(ex)
          print("[WARN] module generated an exception and exited abnormally. "
                "Review the logs to determine the cause of the issue.")
          if "BACKED_FILES" in sys_config_dict.keys() and config_file_path in sys_config_dict["BACKED_FILES"].keys():
              restore(config_file_path, sys_config_dict["BACKED_FILES"])
          return False


  if __name__ == "__main__":  # pragma: no coverage
      run()

constraint:
  requires_ec2: !!str False
  domain: !!str os
  class: !!str diagnose
  distro: !!str alami alami2 ubuntu rhel suse
  required: !!str fstabfailures remediate
  optional: !!str
  software: !!str
  sudo: !!str True
  perfimpact: !!str False
  parallelexclusive: !!str