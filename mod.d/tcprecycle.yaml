# Copyright 2016-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"). You
# may not use this file except in compliance with the License. A copy of
# the License is located at
#
#     http://aws.amazon.com/apache2.0/
#
#
# or in the "license" file accompanying this file. This file is
# distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
# ANY KIND, either express or implied. See the License for the specific
# language governing permissions and limitations under the License.

--- !ec2rlcore.module.Module
# Module document. Translates directly into an almost-complete Module object
name: !!str tcprecycle
path: !!str
version: !!str 3.0
title: !!str Determines if aggressive TCP recycling is enabled
helptext: !!str |
  Determines if aggressive TCP recycling is enabled.
  This can cause problems communicating with same subnet resources
  Sudo is required for remediation
placement: !!str run
package:
  - !!str
language: !!str python
content: !!str |
  """
  Determines if aggressive TCP recycling is enabled. This can cause problems communicating with same subnet
  resources.

  Functions:
      detect: Determines if recycling is enabled
      fix: Disables recycle via sysctl and writes to a file to persist changes across reboot
      print_results: Prints the results of the diagnostic and remediation
      run: Runs the above functions
  """
  from __future__ import print_function
  import re
  import subprocess
  import sys
  import os

  def detect():
      """
      Detects if recycle is enabled via sysctl

      Returns:
          True/False: Based on if it is enabled
      """
      arpstatus = subprocess.check_output(["sysctl", "net.ipv4.tcp_tw_recycle"]).decode("utf-8")
      if re.match(r"net.ipv4.tcp_tw_recycle\ =\ 0", arpstatus):
          return False
      else:
          return True

  def fix():
      """
      Attempts to set recycling to off in sysctl and write the changes to a file to persist across reboots.

      Returns:
          True: If fix is successful.
      """
      # Requires root/sudo privs to fix, so check for that.
      if os.environ["EC2RL_SUDO"] == "True":
          print("We have sudo, continuing")
          print("Setting net.ipv4.tcp_tw_recycle to 0")
          try:
              subprocess.check_call(["sudo", "sysctl", "-w", "net.ipv4.tcp_tw_recycle=0"])
              print("[FIXED] net.ipv4.tcp_tw_recycle=0 for running system")
          except subprocess.CalledProcessError:
              print("[UNFIXED] net.ipv4.tcp_tw_recycle=0 failed for running system")
          try:
              with open("/etc/sysctl.d/55-tcp_rw_recycle.conf", 'a+') as f:
                  f.write('\nnet.ipv4.tcp_tw_recycle = 0\n')
              print("[FIXED] net.ipv4.tcp_tw_recycle=0 in /etc/sysctl.d/55-tcp_rw_recycle.conf")
              return True
          except Exception as ex:
              print(ex)
              print("[UNFIXED] Failed to write config to /etc/sysctl.d/55-tcp_rw_recycle.conf")
      else:
          print("[UNFIXED] Remediation impossible without sudo.")
          return False

  def print_results(results=""):
      """
      Prints the results of the diagnostic and remediation attempts.
      """
      if results == "success":
          print("[SUCCESS] Aggressive TCP recycling is disabled.")
      elif results == "fixed":
          print("[SUCCESS] Aggressive TCP recycling is disabled after remediation."
                "Please see the logs for further details")
      elif results == "failure":
          print("[FAILURE] You have aggressive TCP recycling enabled. "
                "This may cause networking issues when source TCP connections originate from a NAT device.")
          print("-- To disable, you can run 'sudo sysctl -w net.ipv4.tcp_tw_recycle=0'")
          print("-- To disable it from re-occuring on next boot, you can run "
                "'echo 'net.ipv4.tcp_tw_recycle = 0' | sudo tee /etc/sysctl.d/55-tcp_rw_recycle.conf'")
      else:
          print("[WARN] Unable to determine results. Please see module log.")
      print("Please see https://github.com/awslabs/aws-ec2rescue-linux/blob/master/docs/modules/tcprecycle.md "
            "for further details")

  def run():
      """
      Runs the above functions

      Returns:
          True/False: Depending on outcome of diagnostic and remediation.
      """
      try:
          print("Determining if aggressive TCP recycling is is enabled")
          if detect():
              if os.environ.get("remediate"):
                  fix()
                  if detect():
                      print_results(results="failure")
                      return False
                  else:
                      print_results(results="fixed")
              else:
                  print("No --remediate flag passed, no remediation will be attempted.")
                  print_results(results="failure")
                  return False
          else:
              print_results(results="success")
          return True

      except Exception as ex:
          print(ex)
          print("[WARN] module generated an exception and exited abnormally. "
                "Review the logs to determine the cause of the issue.")
          sys.exit(0)

  if __name__ == "__main__":  # pragma: no coverage
      run()

constraint:
  requires_ec2: !!str False
  domain: !!str net
  class: !!str diagnose
  distro: !!str alami ubuntu rhel suse
  required: !!str
  optional: !!str
  software: !!str
  sudo: !!str False
  perfimpact: !!str False
  parallelexclusive: !!str
