# Copyright 2016-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"). You
# may not use this file except in compliance with the License. A copy of
# the License is located at
#
#     http://aws.amazon.com/apache2.0/
#
#
# or in the "license" file accompanying this file. This file is
# distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
# ANY KIND, either express or implied. See the License for the specific
# language governing permissions and limitations under the License.

--- !ec2rlcore.module.Module
# Module document. Translates directly into an almost-complete Module object
name: !!str duplicatefsuuid
path: !!str
version: !!str 1.0
title: !!str Find duplicate filesystem UUIDs
helptext: !!str |
  Identifies which filesystems have duplicate UUIDs
  Requires blkid, commonly provided by util-linux package
placement: !!str run
package:
  - !!str
language: !!str python
content: !!str |
  """
  Determines if any filesystems share a UUID.

  Functions:
      get_fs_uuid_dict: parses output from blkid and returns a dict representing UUIDs and the source devices
      run: get the uuid dict and determine if a duplicate exists
  """

  from __future__ import print_function
  import os
  import subprocess


  def get_fs_uuid_dict():
      """
      Obtain the filesystem UUID mappings from blkid and create and return a dict representing this data.

      Returns:
          fs_uuids_dict (dict): representation of filesystem UUIDs (keys) and the source devices (values)
      """
      fs_uuids_dict = {}
      for line in subprocess.check_output(["blkid", "-s", "UUID"],
                                          stderr=subprocess.STDOUT,
                                          universal_newlines=True).splitlines():
          # Example line: /dev/xvda1: UUID="84691ef1-f2b5-467a-adf6-ddccbacdd703"
          line = line.replace("\"", "").strip()
          tokens = line.split(": UUID=")
          device_file = os.path.realpath(tokens[0])
          fs_uuid = tokens[1]
          try:
              fs_uuids_dict[fs_uuid].append(device_file)
          except KeyError:
              fs_uuids_dict[fs_uuid] = [device_file]
      return fs_uuids_dict


  def run():
      """
      Get the UUID dict and determine if a duplicate exists.

      Returns:
          (bool): whether the check completed successfully
      """
      try:
          fs_uuid_dict = get_fs_uuid_dict()
          fs_uuid_success = True
          for fs_uuid in fs_uuid_dict.keys():
              if len(fs_uuid_dict[fs_uuid]) > 1:
                  fs_uuid_success = False
                  print("[FAILURE] Duplicate UUID, {}, found on the following filesystems: {}".format(
                      fs_uuid, ", ".join(fs_uuid_dict[fs_uuid])))
          if fs_uuid_success:
              print("[SUCCESS] No duplicate filesystem UUIDs found.")
          print("Please see https://github.com/awslabs/aws-ec2rescue-linux/blob/master/docs/modules/duplicatefsuuid.md"
                "for further details")
          return True
      except Exception as ex:
          print(ex)
          print("[WARN] module generated an exception and exited abnormally. "
                "Review the logs to determine the cause of the issue.")
          return False


  if __name__ == "__main__":  # pragma: no coverage
      run()

constraint:
  requires_ec2: !!str False
  domain: !!str os
  class: !!str diagnose
  distro: !!str alami alami2 ubuntu rhel suse
  required: !!str
  optional: !!str
  software: !!str blkid
  sudo: !!str True
  perfimpact: !!str False
  parallelexclusive: !!str
